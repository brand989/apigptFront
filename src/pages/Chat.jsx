import React, { useState, useEffect } from "react";
import axios from "axios";
import { useParams } from "react-router-dom"; 
import { useWebSocket } from "../WebSocketProvider"; 

const Chat = () => { 
  const { chatId } = useParams();
  const { sendMessage } = useWebSocket();
  const { messages, setMessages, setChatId } = useWebSocket();
  const [msg, setMsg] = useState([]);
  const [text, setText] = useState(""); 
  const [chatName, setChatName] = useState("–ó–∞–≥—Ä—É–∑–∫–∞...");
  const [users, setUsers] = useState({});
  const [currentUserId, setCurrentUserId] = useState(null);

  useEffect(() => {
    setChatId(chatId); // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º chatId –≤ WebSocketProvider
  }, [chatId, setChatId]);


  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    const fetchChatInfo = async () => {
      try {
        const response = await axios.get(`http://localhost:3000/api/chat/${chatId}`, {
          withCredentials: true,
        });
        setChatName(response.data.name || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"); 


        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç { userId: username }
        const userMap = {};
        response.data.users.forEach(user => {
          userMap[user._id] = user.username;
        });
        setUsers(userMap);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await axios.get("http://localhost:3000/api/auth/check", {
          withCredentials: true,
        });
        setCurrentUserId(userResponse.data.userId);


      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞:", error);
        setChatName("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
    };

    fetchChatInfo();
  }, [chatId]);


  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º —á–∞—Ç–æ–º
    const fetchMessages = async () => {
      try {
        const response = await axios.get(`http://localhost:3000/api/message/${chatId}`, {
          withCredentials: true,
        });
        setMsg(response.data);  
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      }
    };

    fetchMessages();

  }, [chatId]); 

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = () => {
    if (text.trim()) {
      sendMessage(chatId,  text); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ WebSocket
      setText("");  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    }
  };


  useEffect(() => {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ WebSocket –æ–±–Ω–æ–≤–∏–ª–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ msg
  if (messages && messages.length > 0) {
    messages.forEach((newMessage) => {
      setMsg((prevMsg) => {
        if (prevMsg.find((msg) => msg._id === newMessage._id)) {
          return prevMsg; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        }
        return [...prevMsg, newMessage]; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      });
    });
  }
  }, [messages]); // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è


  return (
    <div className="chat-container">
      <h2 className="chat-title">{chatName}</h2>

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div className="chat-messages">
        {msg.length === 0 ? (
          <p className="chat-no-messages">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>
        ) : (
          msg.map((msg, index) => {
            const isUserMessage = msg.sender === currentUserId; // üëà –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ

            return (
              <div
                key={index}
                className={`chat-message ${
                  isUserMessage ? "chat-message-user" : "chat-message-other"
                }`}
              >
                {!isUserMessage && (
                  <span className="chat-message-sender">{users[msg.sender] || "–ë–û–¢"}</span>
                )}
                {msg.text}
              </div>
            );
          })
        )}
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <div className="chat-input">
        <input
          type="text"
          className="chat-input-field"
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
          value={text}
          onChange={(e) => setText(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === "Enter" && !e.shiftKey) {
              e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
              handleSendMessage();
            }
          }}
        />
        <button className="chat-send-button" onClick={handleSendMessage}>
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </button>
      </div>
    </div>
  );


};

export default Chat;